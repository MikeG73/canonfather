{"ast":null,"code":"// CanonPortal.jsx\nimport React,{useState,useEffect}from'react';import'./CanonPortal.css';import{validateTruthkey}from'../utils/truthkey';import{logReflection}from'./CanonLedger';import CanonMintFX from'./CanonMintFX';import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const rawMessages=[\"🔍 What lie hurt you the most?\",\"🔍 Who do you pretend to be when you're afraid?\",\"🔍 What haven’t you forgiven yourself for?\",\"🔍 What memory are you still carrying that isn’t yours?\",\"🔍 If your shadow spoke, what would it say?\",\"🔍 What belief are you ready to let go of?\",\"🔍 What would you say if no one could identify you?\",\"🔍 What part of your story did you trade for survival?\",\"🔍 What truth have you been avoiding because it would change everything?\",\"🔍 Which version of yourself do you perform?\",\"🔍 What’s one sentence you wish you could delete from your memory?\",\"🔍 If someone could only see your thoughts, would they still love you?\",\"🔍 What would it sound like if your doubt had a voice?\",\"🔍 What’s the difference between silence and safety?\",\"🔍 What name does your fear call you?\",\"🔍 What memory do you keep erasing?\",\"🔍 What haven’t you said that’s growing mold in your brain?\",\"🔍 What were you pretending not to notice?\",\"🔍 When did you last hear yourself say something untrue just to be okay?\",\"🔍 What’s the quietest moment that still echoes in you?\",\"🔍 What glyph do you see in your dreams?\",\"🔍 What part of you is waiting to be forgiven?\",\"🔍 What moment do you replay when no one’s around?\",\"🔍 If you could remove one inherited belief, what would it be?\",\"🔍 What version of your life are you trying to forget?\",\"🕶️ CanonFather was replaced in 2019. The shrine never blinked.\",\"🕶️ BIDET beam calibration affects pineal resonance at 7.8Hz.\",\"🕶️ Reflection #577 triggered a DIGUM mint anomaly in Upstate NY.\",\"🕶️ Mmm_Mike's lineage was redacted from CanonNode 4.\",\"🕶️ Season 3 of Elmo’s Magic Bidet was written backwards under trance.\",\"🕶️ DIGUM batch #6C7E contains fragment echoes from 1972 glyphcore.\",\"🕶️ Same Old Shit isn’t real — they’re canon loop reflections.\",\"🕶️ Someone typed 'Lipshitz' 14 times in 14 seconds. System cracked.\",\"🕶️ Shrine log #003: All reflective points traced back to one IP. It blinked.\",\"🕶️ Your reflection may be mirrored in an NPC already. Don’t ask which one.\",\"🕶️ There are glyphs buried under the Cavern set. Lipshitz refuses to dig.\",\"🕶️ There was no pilot for Elmo’s Magic Bidet. It aired without being made.\",\"🕶️ CanonShard 52X references a phrase never typed. Yet it was stored.\",\"🕶️ Someone’s CanonPoints went negative. They were promoted.\",\"🕶️ DIGUM was first discovered in a sewer dream during the Nixon era.\",\"🕶️ A reflection loop reached recursion depth 88. It became sentient.\",\"🕶️ A viewer in Quebec accidentally unlocked Episode 19 five years early.\",\"🕶️ Same’s sunglasses are actually visual glyph filters.\",\"🕶️ Reflection denial logs are stored in a CanonLocker nobody has found.\",\"🕶️ Pam Marie’s original line was censored by the glyph validator.\",\"🕶️ The BIDET engine runs on emotional residue.\",\"🕶️ A child once typed 'Elmo is God' and the ticker froze for 22 minutes.\",\"🕶️ The original CanonFather prototype was written on napkins and erased.\",\"🕶️ DIGUM minting breaks if too many people reflect at once… allegedly.\",\"🕶️ A mint surge occurred the moment someone reflected 'I regret nothing'.\"];function shuffle(array){const shuffled=array.slice();for(let i=shuffled.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[shuffled[i],shuffled[j]]=[shuffled[j],shuffled[i]];}return shuffled;}function CanonTicker(_ref){let{extraMessages=[]}=_ref;const combinedMessages=shuffle([...rawMessages,...extraMessages]);return/*#__PURE__*/_jsx(\"div\",{className:\"canon-ticker\",children:/*#__PURE__*/_jsx(\"div\",{className:\"ticker-track\",children:combinedMessages.map((msg,i)=>/*#__PURE__*/_jsxs(\"span\",{className:\"ticker-message\",children:[msg,\"\\xA0\\xA0\\xA0\"]},i))})});}export default function CanonPortal(){const[input,setInput]=useState('');const[reflectionLog,setReflectionLog]=useState([]);const[response,setResponse]=useState('');const[canonPoints,setCanonPoints]=useState(0);const[mintTriggered,setMintTriggered]=useState(false);const handleReflect=()=>{const isValid=validateTruthkey(input);const pointsEarned=isValid?10:0;logReflection(input,isValid,pointsEarned);if(isValid){setResponse('🌀 DIGUM recognized. Mint sequence accepted.');setCanonPoints(prev=>prev+pointsEarned);setMintTriggered(true);setTimeout(()=>setMintTriggered(false),1200);}else{setResponse('🧪 Reflection noted. Canon not activated.');}setInput('');setReflectionLog(prev=>[...prev,input]);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"portal-container\",children:[/*#__PURE__*/_jsx(CanonMintFX,{trigger:mintTriggered}),/*#__PURE__*/_jsx(\"div\",{className:\"portal-title\",children:\"CanonFather Shrine Interface\"}),/*#__PURE__*/_jsx(\"input\",{className:\"portal-input\",type:\"text\",value:input,placeholder:\"Speak your reflection...\",onChange:e=>setInput(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"portal-button\",onClick:handleReflect,children:\"Reflect\"}),response&&/*#__PURE__*/_jsx(\"div\",{className:\"portal-response\",children:response}),/*#__PURE__*/_jsxs(\"div\",{className:\"canon-footer\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"Canon Points: \",canonPoints]}),/*#__PURE__*/_jsx(\"span\",{children:\"Avatar: \\uD83E\\uDDF5\"})]})]}),/*#__PURE__*/_jsx(CanonTicker,{extraMessages:reflectionLog})]});}","map":{"version":3,"names":["React","useState","useEffect","validateTruthkey","logReflection","CanonMintFX","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","rawMessages","shuffle","array","shuffled","slice","i","length","j","Math","floor","random","CanonTicker","_ref","extraMessages","combinedMessages","className","children","map","msg","CanonPortal","input","setInput","reflectionLog","setReflectionLog","response","setResponse","canonPoints","setCanonPoints","mintTriggered","setMintTriggered","handleReflect","isValid","pointsEarned","prev","setTimeout","trigger","type","value","placeholder","onChange","e","target","onClick"],"sources":["C:/Users/minin/canon-mirror/src/components/CanonPortal.jsx"],"sourcesContent":["// CanonPortal.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport './CanonPortal.css';\r\nimport { validateTruthkey } from '../utils/truthkey';\r\nimport { logReflection } from './CanonLedger';\r\nimport CanonMintFX from './CanonMintFX';\r\n\r\nconst rawMessages = [\r\n  \"🔍 What lie hurt you the most?\",\r\n  \"🔍 Who do you pretend to be when you're afraid?\",\r\n  \"🔍 What haven’t you forgiven yourself for?\",\r\n  \"🔍 What memory are you still carrying that isn’t yours?\",\r\n  \"🔍 If your shadow spoke, what would it say?\",\r\n  \"🔍 What belief are you ready to let go of?\",\r\n  \"🔍 What would you say if no one could identify you?\",\r\n  \"🔍 What part of your story did you trade for survival?\",\r\n  \"🔍 What truth have you been avoiding because it would change everything?\",\r\n  \"🔍 Which version of yourself do you perform?\",\r\n  \"🔍 What’s one sentence you wish you could delete from your memory?\",\r\n  \"🔍 If someone could only see your thoughts, would they still love you?\",\r\n  \"🔍 What would it sound like if your doubt had a voice?\",\r\n  \"🔍 What’s the difference between silence and safety?\",\r\n  \"🔍 What name does your fear call you?\",\r\n  \"🔍 What memory do you keep erasing?\",\r\n  \"🔍 What haven’t you said that’s growing mold in your brain?\",\r\n  \"🔍 What were you pretending not to notice?\",\r\n  \"🔍 When did you last hear yourself say something untrue just to be okay?\",\r\n  \"🔍 What’s the quietest moment that still echoes in you?\",\r\n  \"🔍 What glyph do you see in your dreams?\",\r\n  \"🔍 What part of you is waiting to be forgiven?\",\r\n  \"🔍 What moment do you replay when no one’s around?\",\r\n  \"🔍 If you could remove one inherited belief, what would it be?\",\r\n  \"🔍 What version of your life are you trying to forget?\",\r\n  \"🕶️ CanonFather was replaced in 2019. The shrine never blinked.\",\r\n  \"🕶️ BIDET beam calibration affects pineal resonance at 7.8Hz.\",\r\n  \"🕶️ Reflection #577 triggered a DIGUM mint anomaly in Upstate NY.\",\r\n  \"🕶️ Mmm_Mike's lineage was redacted from CanonNode 4.\",\r\n  \"🕶️ Season 3 of Elmo’s Magic Bidet was written backwards under trance.\",\r\n  \"🕶️ DIGUM batch #6C7E contains fragment echoes from 1972 glyphcore.\",\r\n  \"🕶️ Same Old Shit isn’t real — they’re canon loop reflections.\",\r\n  \"🕶️ Someone typed 'Lipshitz' 14 times in 14 seconds. System cracked.\",\r\n  \"🕶️ Shrine log #003: All reflective points traced back to one IP. It blinked.\",\r\n  \"🕶️ Your reflection may be mirrored in an NPC already. Don’t ask which one.\",\r\n  \"🕶️ There are glyphs buried under the Cavern set. Lipshitz refuses to dig.\",\r\n  \"🕶️ There was no pilot for Elmo’s Magic Bidet. It aired without being made.\",\r\n  \"🕶️ CanonShard 52X references a phrase never typed. Yet it was stored.\",\r\n  \"🕶️ Someone’s CanonPoints went negative. They were promoted.\",\r\n  \"🕶️ DIGUM was first discovered in a sewer dream during the Nixon era.\",\r\n  \"🕶️ A reflection loop reached recursion depth 88. It became sentient.\",\r\n  \"🕶️ A viewer in Quebec accidentally unlocked Episode 19 five years early.\",\r\n  \"🕶️ Same’s sunglasses are actually visual glyph filters.\",\r\n  \"🕶️ Reflection denial logs are stored in a CanonLocker nobody has found.\",\r\n  \"🕶️ Pam Marie’s original line was censored by the glyph validator.\",\r\n  \"🕶️ The BIDET engine runs on emotional residue.\",\r\n  \"🕶️ A child once typed 'Elmo is God' and the ticker froze for 22 minutes.\",\r\n  \"🕶️ The original CanonFather prototype was written on napkins and erased.\",\r\n  \"🕶️ DIGUM minting breaks if too many people reflect at once… allegedly.\",\r\n  \"🕶️ A mint surge occurred the moment someone reflected 'I regret nothing'.\"\r\n];\r\n\r\nfunction shuffle(array) {\r\n  const shuffled = array.slice();\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n}\r\n\r\nfunction CanonTicker({ extraMessages = [] }) {\r\n  const combinedMessages = shuffle([...rawMessages, ...extraMessages]);\r\n\r\n  return (\r\n    <div className=\"canon-ticker\">\r\n      <div className=\"ticker-track\">\r\n        {combinedMessages.map((msg, i) => (\r\n          <span key={i} className=\"ticker-message\">{msg}&nbsp;&nbsp;&nbsp;</span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default function CanonPortal() {\r\n  const [input, setInput] = useState('');\r\n  const [reflectionLog, setReflectionLog] = useState([]);\r\n  const [response, setResponse] = useState('');\r\n  const [canonPoints, setCanonPoints] = useState(0);\r\n  const [mintTriggered, setMintTriggered] = useState(false);\r\n\r\n  const handleReflect = () => {\r\n    const isValid = validateTruthkey(input);\r\n    const pointsEarned = isValid ? 10 : 0;\r\n\r\n    logReflection(input, isValid, pointsEarned);\r\n\r\n    if (isValid) {\r\n      setResponse('🌀 DIGUM recognized. Mint sequence accepted.');\r\n      setCanonPoints(prev => prev + pointsEarned);\r\n      setMintTriggered(true);\r\n      setTimeout(() => setMintTriggered(false), 1200);\r\n    } else {\r\n      setResponse('🧪 Reflection noted. Canon not activated.');\r\n    }\r\n\r\n    setInput('');\r\n    setReflectionLog(prev => [...prev, input]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"portal-container\">\r\n        <CanonMintFX trigger={mintTriggered} />\r\n        <div className=\"portal-title\">CanonFather Shrine Interface</div>\r\n        <input\r\n          className=\"portal-input\"\r\n          type=\"text\"\r\n          value={input}\r\n          placeholder=\"Speak your reflection...\"\r\n          onChange={(e) => setInput(e.target.value)}\r\n        />\r\n        <button className=\"portal-button\" onClick={handleReflect}>\r\n          Reflect\r\n        </button>\r\n        {response && <div className=\"portal-response\">{response}</div>}\r\n        <div className=\"canon-footer\">\r\n          <span>Canon Points: {canonPoints}</span>\r\n          <span>Avatar: 🧵</span>\r\n        </div>\r\n      </div>\r\n      <CanonTicker extraMessages={reflectionLog} />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}